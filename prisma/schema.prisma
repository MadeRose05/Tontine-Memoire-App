generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  msisdn         String         @unique
  pin            String
  name           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Bank           Bank?
  Participants   Participants[]
  Profile        Profile?
  tempOTP        TempOTP?
  createdTontine Tontine[]
  Invitation     Invitation[]   @relation("InvitationToUser")
}

model Bank {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  balance   Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String   @id @default(uuid())
  username  String   @unique @db.VarChar(20)
  image     String?
  userId    String   @unique
  about     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TempOTP {
  id        String   @id @default(uuid())
  msisdn    String   @unique
  otp       Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [msisdn], references: [msisdn], onDelete: Cascade)
}

model Participants {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tontineId   String
  userId      String
  round       Int
  tontine     Tontine       @relation(fields: [tontineId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]
}

model Tontine {
  id           String         @id @default(uuid())
  nom          String
  description  String?
  cotisation   Int
  status       TontineStatus  @default(Pending)
  totalRound   Int
  frequence    Frequence      @default(Month)
  startDate    String?
  inviteCode   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    String
  Invitation   Invitation[]
  participants Participants[]
  owner        User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  Transaction  Transaction[]
  wallet       Wallets?

  @@index([id, nom])
}

model Transaction {
  id        String       @id @default(uuid())
  amount    Decimal
  senderId  String
  tour      Int
  tontineId String
  createdAt DateTime     @default(now())
  sender    Participants @relation(fields: [senderId], references: [id], onDelete: Cascade)
  tontine   Tontine      @relation(fields: [tontineId], references: [id])
}

model Wallets {
  accountNumber String   @id @unique @default(uuid())
  amount        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tontineId     String   @unique
  tontine       Tontine  @relation(fields: [tontineId], references: [id], onDelete: Cascade)

  @@index([accountNumber])
}

model Invitation {
  id        String        @id @unique @default(uuid())
  status    InvitedStatus @default(PENDING)
  msisdn    String
  memberId  String?       @unique
  tontineId String
  nom       String
  round     Int
  tontine   Tontine       @relation(fields: [tontineId], references: [id], onDelete: Cascade)
  User      User[]        @relation("InvitationToUser")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Status {
  ACTIVE
  BANNED
  DELETED
}

enum InvitedStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Frequence {
  Month
  Week
  Day
}

enum TontineStatus {
  Pending
  Ongoing
  Ended
}

enum TransactionStatus {
  Pending
  Success
  Failed
}
